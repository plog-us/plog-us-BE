plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.gdscsmwu.earthus'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// lombok 라이브러리
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// lombok 테스트 라이브러리
	testImplementation 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// 프로젝트에 Spring Data Jpa 적용
	// spring-boot-starter-data-jpa
	// - 스프링 부트용 Spring Data Jpa 추상화 라이브러리
	// - 스프링 부트 버전에 맞춰 자동으로 JPA 관련 라이브러리들의 버전을 관리
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// h2
	// - 인메모리 관계형 데이터베이스
	// - 별도의 설치가 필요 없이 프로젝트 의존성만으로 관리할 수 있다.
	// - 메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화된다는 점을 이용하여 테스트 용도로 많이 사용
	// - 이 책에서는 JPA의 테스트, 로컬 환경에서의 구동에서 사용할 예정
	//implementation 'com.h2database:h2'

	// session
	// schema-mysql.sql
	implementation 'org.springframework.session:spring-session-jdbc'
	// 애플리케이션을 실행해서 로그인을 테스트한 뒤, h2-console로 접속한다.
	// h2-console을 보면 세션을 위한 테이블 2개(SPRING_SESSION, SPRING_SESSION_ATTRIBUTES)가 생성된 것을 볼 수 있다.
	// JPA로 인해 세션 테이블이 자동 생성되었기 때문에 별도로 해야 할 일은 없다.
	// 방금 로그인했기 때문에 한 개의 세션이 등록돼있는 것을 볼 수 있다.
	// 세션 저장소를 데이터베이스로 교체했다.
	// 물론 지금은 기존과 동일하게 스프링을 재시작하면 세션이 풀린다.
	// 이유는 H2 기반으로 스프링이 재실행될 때 H2도 재시작되기 때문이다.
	// 이후 AWS로 배포하게 되면 AWS의 데이터베이스 서비스인 RDS(Relational Database Service)를 사용하게 되니 이때부터는 세션이 풀리지 않는다.

	// spring security
	// - 소셜 로그인 등 클라이언트 입장에서 소셜 기능 구현 시 필요한 의존성
	// - spring-security-oauth2-client와 spring-security-oauth2-jose를 기본으로 관리해준다.
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	// 스프링 시큐리티 테스트를 위한 여러 도구를 지원하는 spring-security-test를 build.gradle에 추가한다.
	testImplementation 'org.springframework.security:spring-security-test'

	//developmentOnly 'org.springframework.boot:spring-boot-devtools'
	//runtimeOnly 'com.mysql:mysql-connector-j'

	// MySQL
	implementation 'mysql:mysql-connector-java'

	// @Valid
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// JacksonConfig
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'

	// JPA Spatial type
	implementation 'org.hibernate:hibernate-spatial:5.6.9.Final'

	// Google Cloud Platform Storage(GCP Storage)
//	implementation 'org.springframework.cloud:spring-cloud-gcp-starters:1.2.5.RELEASE'
////	implementation 'org.springframework.cloud:spring-cloud-gcp-storage:1.2.5.RELEASE'
//	implementation 'org.springframework.cloud:spring-cloud-gcp-starter-storage:1.2.5.RELEASE'

	implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter', version: '1.2.5.RELEASE'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-storage', version: '1.2.5.RELEASE'


//	implementation 'com.google.firebase:firebase-admin:9.2.0'
//	// 파이어스토어 데이터베이스
//	implementation 'com.google.firebase:firebase-firestore-ktx:24.3.0'
//	// 파이어베이스 스토리지
//	implementation 'com.google.firebase:firebase-storage-ktx:20.0.2'
//	// 스토리지에서 이미지 파일 내려받기
//	implementation 'com.github.bumptech.glide:glide:4.13.2'
//	implementation 'com.firebaseui:firebase-ui-storage:8.0.1'
//	implementation 'com.github.bumptech.glide:compiler:4.13.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

//// 배포 관련
//jar {
//	enabled=false
//}